name: Package tests

on:
  pull_request:
    branches:
      - main
      - master
      - dev
  push:
    branches-ignore:
      - main
      - master
      - dev
  # workflow_call:
  #   secrets:
  #     DOCKER_USERNAME:
  #       description: 'Docker Hub username'
  #       required: true
  #     DOCKER_TOKEN:
  #       description: 'Docker Hub password'
  #       required: true
  #       description: 'Docker Hub username'
  #       required: true
  #     DOCKER_TOKEN:
  #       description: 'Docker Hub password'
  #       required: true

permissions:
  contents: read

jobs:
  package-filter:
    name: Filter for updated package
    uses: ./.github/workflows/package-filter.yml

  tests:
    name: Test "${{ matrix.package_name }}"
    needs: package-filter
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.package-filter.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Run pre-commit hooks and check for changes
        run: |
          cd "${{ matrix.package_dir }}"

          poetry run pre-commit run --files ./**/**
          if [[ $(git status --porcelain) ]]
          then
            echo "::error::pre-commit hooks failed for ${{ matrix.package_name }}" && exit 1
          fi
      - name: Run tests
        run: |
          package_dir=${{ matrix.package_dir }}
          cd $package_dir

          poetry install
          poetry run pytest -v

  # docker:
  #   name: Build Docker images
  #   needs: [package-filter, tests]
  #   uses: ./.github/workflows/docker.yml
  #   with:
  #     matrix: ${{ needs.package-filter.outputs.matrix }}
  #     push: true
  #   secrets:
  #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #     DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  docker:
    name: Docker "${{ matrix.package_name }}"
    needs: [package-filter, tests]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.package-filter.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get | Docker Tag
        id: docker_tag
        run: |
          package_dir="${{ matrix.package_dir }}"
          version=$(cat ${package_dir}/VERSION)
          tag=polusai/${{ matrix.package_name }}:${version}
          echo "tag=${tag}" >> $GITHUB_OUTPUT
      - name: Setup | Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login | DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Check | Image exists
        run: |
          tag=${{ steps.docker_tag.outputs.tag }}
          docker pull ${tag} > /dev/null \
              && $(echo "::error::${tag} already exists on DockerHub" && exit 1) \
              || echo "success"
      - name: Publish | Docker Image
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:${{ matrix.package_dir }}"
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.docker_tag.outputs.tag }}
