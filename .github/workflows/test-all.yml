name: Test All Tools

on:
  workflow_dispatch:
    inputs:
      pr-number:
        description: 'PR Number'
        required: true
        default: 61
        type: number
      repo:
        description: 'Repository'
        required: true
        default: 'polusai/filepattern'
        type: string
  workflow_call:
    inputs:
      pr-number:
        description: 'PR Number'
        required: true
        default: 61
        type: number
      repo:
        description: 'Repository'
        required: true
        default: 'polusai/filepattern'
        type: string

permissions:
  contents: read

jobs:
  find-tools:
    name: Find all tools
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      list: ${{ steps.set-matrix.outputs.list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'nishaq503/image-tools'
          ref: 'master'
      - name: Find tools
        id: set-matrix
        run: |
          # Initialize variables

          # List of directories to ignore
          ignored_dirs="polus-python-template ftl-label .venv"
          # List of tools that are too slow to test
          slow_tools="k-means-clustering pixel-segmentation-eval mesmer-inference mesmer-training theia"
          # List of tools that are broken for known reasons
          broken_tools="binary-operations basic-flatfield-estimation theia"
          # List of tools that are broken for unknown reasons
          unknown_broken_tools="image-calculator apply-flatfield precompute-slide"

          ignored_dirs="$ignored_dirs $slow_tools $broken_tools $unknown_broken_tools"
          tool_dirs=""

          # Get all directories in the current directory
          dirs=$(find $(pwd) -type d)

          # Get all directories that have a "pyproject.toml" file
          for dir in $dirs; do
            # Ignore the current directory
            if [ "$dir" == "$(pwd)" ]; then
              continue
            fi
            # Ignore the directory if it contains any of the substrings in "ignored_dirs"
            for ignored_dir in $ignored_dirs; do
              if [[ "$dir" == *"$ignored_dir"* ]]; then
                continue 2
              fi
            done
            # If the directory contains a "pyproject.toml" file, then add it to the list of tools
            if [ -f "$dir/pyproject.toml" ]; then
              tool_dirs="$tool_dirs $dir"
            fi
          done
          # Remove leading and trailing spaces
          tool_dirs=$(echo $tool_dirs | xargs)

          # Convert the list of tools to a JSON string
          tools_json="{\"include\": ["
          for tool in $tool_dirs; do
            tool_name=$(basename $tool)
            json_line="{\"tool_dir\": \"$tool\", \"tool_name\": \"$tool_name\"},"
            if [ ! "$tools_json" == *"json_line"* ]; then
              tools_json="$tools_json$json_line"
            fi
          done
          # Remove the trailing comma
          if [ "$tools_json" == *"," ]; then
            tools_json="${tools_json%?}"
          fi
          tools_json="$tools_json]}"

          echo "tools_json: $tools_json"
          echo "tool_dirs: $tool_dirs"

          # Set the output
          echo "matrix=$( echo "$tools_json" )" >> $GITHUB_OUTPUT
          echo "list=$( echo "$tool_dirs" )" >> $GITHUB_OUTPUT

  pre-tests:
    name: Pre-update Tests | ${{ matrix.tool_name }}
    runs-on: ubuntu-latest
    needs: find-tools
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.find-tools.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'nishaq503/image-tools'
          ref: 'master'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install | ${{ matrix.tool_name }}
        run: |
          cd ${{ matrix.tool_dir }}
          poetry install
      - name: Pre-Update Test
        run: |
          cd ${{ matrix.tool_dir }}
          poetry run pytest -v

  post-tests:
    name: Post-Update Tests | ${{ matrix.tool_name }}
    runs-on: ubuntu-latest
    needs: find-tools
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.find-tools.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'nishaq503/image-tools'
          ref: 'master'
      - name: Install | Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install | Poetry
        uses: abatilo/actions-poetry@v2
      - name: Download | Filepattern PR ${{ inputs.pr-number }}
        uses: dawidd6/action-download-artifact@v3
        with:
          repo: ${{ inputs.repo }}
          pr: ${{ inputs.pr-number }}
          workflow: 'build_wheels.yml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          path: 'dist'
          workflow_conclusion: ''
      - name: Install | ${{ matrix.tool_name }}
        run: |
          root_dir=$(pwd)
          cd ${{ matrix.tool_dir }}
          poetry install
          pip install --find-links=${root_dir}/dist/filepattern-wheels filepattern
      - name: Post-Update Test
        run: |
          cd ${{ matrix.tool_dir }}
          poetry run pytest -v
