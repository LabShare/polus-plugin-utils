name: Package tests

on:
  pull_request:
    branches:
      - main
      - master
      - dev
  push:
    branches-ignore:
      - main
      - master
      - dev
  workflow_call:

permissions:
  contents: read

jobs:
  package-filter:
    name: Filter for updated package
    uses: ./.github/workflows/package-filter.yml
    with:
      num-commits: 0
      ignore-missing-dev: false

  pre-commit:
    name: Pre-commit | ${{ matrix.package_name }}
    needs: package-filter
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.package-filter.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Run pre-commit hooks and check for changes
        run: |
          cd "${{ matrix.package_dir }}"

          poetry run pre-commit run --files ./**/**
          if [[ $(git status --porcelain) ]]
          then
            echo "::error::pre-commit hooks failed for ${{ matrix.package_name }}" && exit 1
          fi

  docker:
    name: Docker | Build ${{ matrix.package_name }}
    needs: package-filter
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.package-filter.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "${{ matrix.package_dir }}/Dockerfile" ]; then
            echo "Dockerfile exists"
            echo "dockerfile_exists=true" >> $GITHUB_ENV
          else
            echo "Dockerfile does not exist"
            echo "dockerfile_exists=false" >> $GITHUB_ENV
          fi
      - name: Docker | Tag
        id: docker_tag
        if: env.dockerfile_exists == 'true'
        run: |
          version=$(cat ${{ matrix.package_dir }}/VERSION)
          tag=polusai/${{ matrix.package_name }}:${version}
          echo "tag will be ${tag}"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
      - name: Docker | Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker | Check if Image exists
        if: env.dockerfile_exists == 'true'
        run: |
          tag=${{ steps.docker_tag.outputs.tag }}
          docker pull ${tag} > /dev/null \
              && $(echo "::error::${tag} already exists on DockerHub" && exit 1) \
              || echo "success"
      - name: Docker | Build Image
        if: env.dockerfile_exists == 'true'
        run: |
          cp .gitignore ${{ matrix.package_dir }}/.dockerignore
          cd "${{ matrix.package_dir }}"
          if [ -f "build-docker.sh" ]; then
            bash build-docker.sh
          else
            docker build . -t ${{ steps.docker_tag.outputs.tag }}
          fi
          bash build-docker.sh
        # docker buildx build --platform linux/amd64,linux/arm64 -t ${tag} --push .

  tests:
    name: Test | ${{ matrix.package_name }}
    needs: package-filter
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.package-filter.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
      - name: Run tests with conda
        run: |
          package_dir=${{ matrix.package_dir }}
          cd $package_dir
          if [ -f "environment.yml" ]; then
            conda init bash
            source ~/.bashrc
            conda env create -f environment.yml
            conda activate project_env
            pip install -e ".[all]"
            conda install pytest
            python -X faulthandler -m pytest -v -p no:faulthandler
            echo "conda_installed=true" >> $GITHUB_ENV
          else
            echo "conda_installed=false" >> $GITHUB_ENV
          fi
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Run tests with poetry
        if: env.conda_installed == 'false'
        run: |
          package_dir=${{ matrix.package_dir }}
          cd $package_dir

          poetry install
          python -m pip install pytest pytest-sugar
          python -X faulthandler -m pytest -v -p no:faulthandler
