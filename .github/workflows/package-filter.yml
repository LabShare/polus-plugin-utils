name: Package Filter

on:
  workflow_call:
    outputs:
      matrix:
        description: "The directories containing the updated packages"
        value: ${{ jobs.package-filter.outputs.matrix }}

permissions:
  contents: read

jobs:
  package-filter:
    name: Filter for updated packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.package-filter.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - name: Find Updated Packages
        id: package-filter
        run: |
          PACKAGE_DIRS=""

          for changed_file in $(git diff --name-only origin/${{ github.base_ref }}...)
          do
            pkg_dir=$(dirname ${changed_file})

            # Exclude the root directory
            if [[ "$pkg_dir" == "." ]]
            then
              continue
            fi

            # Check if the changed file is a pyproject.toml file
            if [[ "$(basename ${changed_file})" == *"pyproject.toml"* ]]
            then

              # Check that the package has a VERSION file
              if [[ ! -f "$(dirname ${changed_file})/VERSION" ]]
              then
                echo "::error::$(dirname ${changed_file}) does not have a VERSION file" && exit 1
              fi

              # Check that the version is a dev version
              if [[ "$(cat $(dirname ${changed_file})/VERSION)" != *"dev"* ]]
              then
                echo "::error::$(dirname ${changed_file}) does not have a dev version" && exit 1
              fi

              PACKAGE_DIRS="$PACKAGE_DIRS $(dirname ${changed_file})"
            fi
          done

          # Check if any packages were found
          if [[ -z "$PACKAGE_DIRS" ]]
          then
            echo "::error::No updated packages were found" && exit 1
          fi

          # Convert the package directories to JSON for the output matrix
          JSON="{\"include\": ["
          for package_dir in $PACKAGE_DIRS
          do
            package_name=$(basename $package_dir)
            JSON_LINE="{\"package_dir\": \"${package_dir}\", \"package_name\": \"${package_name}\"},"
            # Add the JSON line to the JSON string if it is not already included
            if [[ ! "$JSON" == *"$JSON_LINE"* ]]
            then
              JSON="$JSON$JSON_LINE"
            fi
          done

          # Remove trailing comma and add closing brackets
          if [[ $JSON == *, ]]
          then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"

          # Set the output
          echo "matrix=$( echo "$JSON" )" >> $GITHUB_OUTPUT
