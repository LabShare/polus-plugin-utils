"""This file is autogenerated from an ImageJ plugin generation pipeline."""

import logging
import pathlib

import filepattern
import imagej
import scyjava
import tqdm
import typer
from polus.images.transforms.imagej_deconvolve_richardsonlucytv import POLUS_LOG
from polus.images.transforms.imagej_deconvolve_richardsonlucytv import (
    deconvolve_richardsonlucytv,
)

# Initialize the logger
logging.basicConfig(
    format="%(asctime)s - %(name)-8s - %(levelname)-8s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("main")
logger.setLevel(POLUS_LOG)

app = typer.Typer()


def disable_loci_logs() -> None:
    """Bioformats throws a debug message, disable the loci debugger to mute it."""
    debug_tools = scyjava.jimport("loci.common.DebugTools")
    debug_tools.setRootLevel("WARN")


# scyjava to configure the JVM
scyjava.config.add_option("-Xmx6g")
scyjava.when_jvm_starts(disable_loci_logs)


@app.command()
def main(  # noqa: PLR0913
    inp_dir: pathlib.Path = typer.Option(
        ...,
        "--inpDir",
        help="Collection to be processed by this plugin",
        exists=True,
        file_okay=False,
        readable=True,
        resolve_path=True,
    ),
    pattern: str = typer.Option(
        ".*",
        "--pattern",
        help="Pattern to match the files in the collection",
    ),
    psf_path: pathlib.Path = typer.Option(
        ...,
        "--psfPath",
        help="Path to the image containing the Point Spread Function",
        exists=True,
        file_okay=True,
        readable=True,
        resolve_path=True,
    ),
    max_iterations: int = typer.Option(
        ...,
        "--maxIterations",
        help="Maximum number of iterations",
    ),
    regularization_factor: float = typer.Option(
        ...,
        "--regularizationFactor",
        help="Regularization factor",
    ),
    out_dir: pathlib.Path = typer.Option(
        ...,
        "--outDir",
        help="Output collection",
        exists=True,
        file_okay=False,
        writable=True,
        resolve_path=True,
    ),
) -> None:
    """Run the Op."""
    logger.debug("Starting ImageJ...")
    ij = imagej.init(
        "sc.fiji:fiji:2.1.1+net.imagej:imagej-legacy:0.37.4",
        mode="headless",
    )
    logger.debug(f"Loaded ImageJ version: {ij.getVersion()}")

    fp = filepattern.FilePattern(inp_dir, pattern)
    files = []
    for _, fs in fp():
        files.extend(fs)

    for inp_path in tqdm.tqdm(files):
        deconvolve_richardsonlucytv(
            inp_path,
            psf_path,
            max_iterations,
            regularization_factor,
            out_dir,
            ij,
        )


if __name__ == "__main__":
    app()
