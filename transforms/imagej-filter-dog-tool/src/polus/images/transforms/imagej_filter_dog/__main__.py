"""This file is autogenerated from an ImageJ plugin generation pipeline."""

import logging
import pathlib

import filepattern
import imagej
import scyjava
import tqdm
import typer
from polus.images.transforms.imagej_filter_dog import POLUS_LOG
from polus.images.transforms.imagej_filter_dog import filter_dog

# Initialize the logger
logging.basicConfig(
    format="%(asctime)s - %(name)-8s - %(levelname)-8s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("main")
logger.setLevel(POLUS_LOG)

app = typer.Typer()


def disable_loci_logs() -> None:
    """Bioformats throws a debug message, disable the loci debugger to mute it."""
    debug_tools = scyjava.jimport("loci.common.DebugTools")
    debug_tools.setRootLevel("WARN")


# scyjava to configure the JVM
scyjava.config.add_option("-Xmx6g")
scyjava.when_jvm_starts(disable_loci_logs)


@app.command()
def main(
    inp_dir: pathlib.Path = typer.Option(
        ...,
        "--inpDir",
        help="Collection to be processed by this plugin",
        exists=True,
        file_okay=False,
        readable=True,
        resolve_path=True,
    ),
    pattern: str = typer.Option(
        ".*",
        "--pattern",
        help="Pattern to match the files in the collection",
    ),
    sigma_l_: str = typer.Option(
        ...,
        "--sigmaL",
        help=(
            "Standard deviation for the first Gaussian. Single value or comma "
            "separated list of values"
        ),
    ),
    sigma_r_: str = typer.Option(
        ...,
        "--sigmaR",
        help=(
            "Standard deviation for the second Gaussian. Single value or comma "
            "separated list of values"
        ),
    ),
    out_dir: pathlib.Path = typer.Option(
        ...,
        "--outDir",
        help="Output collection",
        exists=True,
        file_okay=False,
        writable=True,
        resolve_path=True,
    ),
) -> None:
    """Run the Op."""
    logger.debug("Starting ImageJ...")
    ij = imagej.init(
        "sc.fiji:fiji:2.1.1+net.imagej:imagej-legacy:0.37.4",
        mode="headless",
    )
    logger.debug(f"Loaded ImageJ version: {ij.getVersion()}")

    if "," in sigma_l_:
        sigma_l = list(map(float, sigma_l_.split(",")))
    else:
        sigma_l = [float(sigma_l_)]

    if "," in sigma_r_:
        sigma_r = list(map(float, sigma_r_.split(",")))
    else:
        sigma_r = [float(sigma_r_)]

    if len(sigma_l) != len(sigma_r):
        msg = "sigmaL and sigmaR must have the same number of values"
        raise ValueError(msg)

    fp = filepattern.FilePattern(inp_dir, pattern)
    files = []
    for _, fs in fp():
        files.extend(fs)

    for inp_path in tqdm.tqdm(files):
        filter_dog(inp_path, sigma_l, sigma_r, out_dir, ij)


if __name__ == "__main__":
    app()
