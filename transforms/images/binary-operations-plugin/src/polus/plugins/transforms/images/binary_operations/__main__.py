"""Run the binary operations tool from the command line."""
import json
import logging
import os
import pathlib
import typing

import typer
from filepattern import FilePattern
from polus.plugins.transforms.images.binary_operations import Operation
from polus.plugins.transforms.images.binary_operations import StructuringShape
from polus.plugins.transforms.images.binary_operations import __version__
from polus.plugins.transforms.images.binary_operations import batch_binary_ops

app = typer.Typer()

# Initialize the logger
logging.basicConfig(
    format="%(asctime)s - %(name)-8s - %(levelname)-8s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("polus.plugins.transforms.images.binary_operations")
logger.setLevel(os.environ.get("POLUS_LOG", logging.INFO))


@app.command()
def main(  # noqa: PLR0913
    pattern: str = typer.Option(
        ".+",
        "--filePattern",
        help="FilePattern used to parse data.",
    ),
    inp_dir: pathlib.Path = typer.Option(..., "--inpDir", help="Path to input images."),
    out_dir: pathlib.Path = typer.Option(
        ...,
        "--outDir",
        help="Path to place output files.",
    ),
    operation: Operation = typer.Option(
        ...,
        "--operation",
        help="Binary operation to perform.",
    ),
    shape: StructuringShape = typer.Option(
        StructuringShape.ELLIPSE,
        "--shape",
        help="Shape of the structuring element for the operation.",
    ),
    kernel: int = typer.Option(3, "--kernel", help="Kernel size."),
    threshold: int = typer.Option(
        0,
        "--threshold",
        help="""The threshold for area filtering if selected. If removing small objects,
                objects below this size will be removed. If removing large objects,
                objects larger than this size will be removed.""",
    ),
    iterations: int = typer.Option(
        0,
        "--iterations",
        help="""The number of iterations to apply the operation if the operation permits
                iterations (e.g. dilation).""",
    ),
    preview: bool = typer.Option(
        False,
        help="Output a JSON preview of files generated by this tool.",
    ),
) -> None:
    """Advanced montaging tool."""
    logger.info(f"version: {__version__}")

    logger.info(f"filePattern = {pattern}")
    logger.info(f"inpDir = {inp_dir}")
    logger.info(f"outDir = {out_dir}")
    logger.info(f"operation = {operation}")
    logger.info(f"shape = {shape}")
    logger.info(f"kernel = {kernel}")
    logger.info(f"threshold = {threshold}")
    logger.info(f"iterations = {iterations}")

    if preview:
        with out_dir.joinpath("preview.json").open("w") as fw:
            out_files: dict[str, typing.Union[list, str]] = {
                r"filepattern": pattern,
                "outDir": [],
            }
            for _, f in FilePattern(inp_dir, pattern):
                out_files["outDir"].extend(f)  # type: ignore
            json.dump(out_files, fw, indent=2)

    else:
        batch_binary_ops(
            inp_dir=inp_dir,
            out_dir=out_dir,
            operation=operation,
            structuring_shape=shape,
            file_pattern=pattern,
            kernel=kernel,
            iterations=iterations,
            threshold=threshold,
        )


if __name__ == "__main__":
    app()
