"""Run the montaging tool from the command line."""
import json
import logging
import os
import pathlib
import typing

import typer

from polus.plugins.transforms.images.montage import (
    __version__,
    generate_montage_patterns,
    montage_all,
)
from polus.plugins.transforms.images.montage.montage import MULTIPLIER, SPACING

app = typer.Typer()

# Initialize the logger
logging.basicConfig(
    format="%(asctime)s - %(name)-8s - %(levelname)-8s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("polus.plugins.transforms.images.montage")
logger.setLevel(os.environ.get("POLUS_LOG", logging.INFO))


@app.command()
def _main(
    pattern: str = typer.Option(
        ..., "--filePattern", help="FilePattern used to parse data."
    ),
    inp_dir: pathlib.Path = typer.Option(
        ..., "--inpDir", help="Specify montage organization."
    ),
    layout: typing.List[str] = typer.Option(
        ..., "--layout", help="Specify montage organization."
    ),
    out_dir: pathlib.Path = typer.Option(..., "--outDir", help="Output collection."),
    flip_axis: typing.List[str] = typer.Option(
        [], "--flipAxis", help="Axes to flip or reverse order."
    ),
    image_spacing: int = typer.Option(
        SPACING,
        "--imageSpacing",
        help="Spacing between images in the smallest subgrid.",
    ),
    grid_spacing: int = typer.Option(
        MULTIPLIER,
        "--gridSpacing",
        help="Spacing between values in the same grid level.",
    ),
    preview: bool = typer.Option(
        False, help="Output a JSON preview of files generated by this tool."
    ),
) -> None:
    """Advanced montaging tool."""
    logger.info(f"version: {__version__}")

    # Parse the arguments
    if len(flip_axis) == 1:
        flip_axis = [v for v in flip_axis[0]]

    if len(layout) == 1:
        layout = layout[0].replace(" ", "").split(",")

    logger.info(f"filePattern = {pattern}")
    logger.info(f"inpDir = {inp_dir}")
    logger.info(f"layout = {layout}")
    logger.info(f"flipAxis = {flip_axis}")
    logger.info(f"outDir = {out_dir}")
    logger.info(f"imageSpacing = {image_spacing}")
    logger.info(f"gridSpacing = {grid_spacing}")

    if preview:
        with open(pathlib.Path(out_dir).joinpath("preview.json"), "w") as fw:
            subpatterns = generate_montage_patterns(pattern, inp_dir, layout)
            out_files: typing.Dict[str, typing.Union[typing.List, str]] = {
                r"filepattern": "img-global-positions-{p:d+}.txt",
                "outDir": [],
            }
            for i in range(len(subpatterns)):
                out_files["outDir"].append(f"img-global-positions-{i}.txt")  # type: ignore
            json.dump(out_files, fw, indent=2)

    else:
        montage_all(
            pattern, inp_dir, layout, flip_axis, out_dir, image_spacing, grid_spacing
        )


if __name__ == "__main__":
    app()
