"""RoI-Relabel CLI for WIPP."""

import concurrent.futures
import json
import logging
import pathlib
import time

import filepattern as fp
import typer
from polus.plugins.transforms.images.roi_relabel import methods
from polus.plugins.transforms.images.roi_relabel import utils

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("polus.plugins.transforms.images.roi_relabel")
logger.setLevel(utils.constants.POLUS_LOG)

app = typer.Typer()


@app.command()
def _main(
    inp_dir: pathlib.Path = typer.Option(
        ...,
        "--inpDir",
        help="Input directory with labeled images.",
    ),
    out_dir: pathlib.Path = typer.Option(
        ...,
        "--outDir",
        help="Directory where output images should be written.",
    ),
    method: methods.Methods = typer.Option("contiguous", help="to use for relabeling"),
    pattern: str = typer.Option(
        ".*",
        "--filePattern",
        help="filepattern for images in inpDir.",
    ),
    preview: bool = typer.Option(
        False,
        help="Output a JSON preview of files generated by this tool.",
    ),
) -> None:
    inp_dir = inp_dir.resolve()
    assert inp_dir.exists(), f"Path not found {inp_dir}"
    if inp_dir.joinpath("images").is_dir():
        inp_dir = inp_dir.joinpath("images")

    out_dir = out_dir.resolve()
    assert out_dir.exists(), f"Path not found {out_dir}"

    assert inp_dir != out_dir, "inpDir and outDir must be different."

    logger.info(f"inpDir = {inp_dir}")
    logger.info(f"outDir = {out_dir}")
    logger.info(f"{method = }")
    logger.info(f"filePattern = {pattern}")

    if preview:
        with out_dir.joinpath("preview.json").open("w") as writer:
            json.dump({"filePattern": pattern}, writer, indent=2)
        return

    start = time.perf_counter()
    logger.info("Getting started ...")

    image_paths = [
        pathlib.Path(path[1][0]) for path in fp.FilePattern(str(inp_dir), pattern)()
    ]
    with concurrent.futures.ProcessPoolExecutor(
        max_workers=utils.constants.NUM_THREADS,
    ) as executor:
        futures: list[concurrent.futures.Future[bool]] = []

        for inp_path in image_paths:
            out_path = out_dir.joinpath(utils.helpers.replace_extension(inp_path.name))
            futures.append(
                executor.submit(
                    methods.relabel,
                    inp_path,
                    out_path,
                    method,
                ),
            )

        done, not_done = concurrent.futures.wait(futures, 10)
        while len(not_done) > 0:
            logger.info(f"Progress {100 * len(done) / len(futures):6.2f}% ...")
            done, not_done = concurrent.futures.wait(futures, 10)

    end = time.perf_counter()
    logger.info(
        f"Finished relabeling {len(image_paths)} images in {end - start:.2e} seconds!",
    )


if __name__ == "__main__":
    app()
