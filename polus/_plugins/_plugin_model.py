# generated by datamodel-codegen:
#   filename:  wipp-plugin-manifest-schema.json
#   timestamp: 2021-03-19T01:44:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Type(Enum):
    collection = "collection"
    stitchingVector = "stitchingVector"
    tensorflowModel = "tensorflowModel"
    csvCollection = "csvCollection"
    pyramid = "pyramid"
    notebook = "notebook"
    string = "string"
    number = "number"
    integer = "integer"
    enum = "enum"
    array = "array"
    boolean = "boolean"


class Input(BaseModel):
    name: constr(regex=r"^[a-zA-Z0-9][-a-zA-Z0-9]*$") = Field(  # noqa: F722
        ...,
        description="Input name as expected by the plugin CLI",
        examples=["inputImages", "fileNamePattern", "thresholdValue"],
        title="Input name",
    )
    type: Type = Field(
        ..., examples=["collection", "string", "number"], title="Input Type"
    )
    description: constr(regex=r"^(.*)$") = Field(  # noqa: F722
        ..., examples=["Input Images"], title="Input description"
    )
    required: Optional[bool] = Field(
        True,
        description="Whether an input is required or not",
        examples=[True],
        title="Required input",
    )


class Type1(Enum):
    collection = "collection"
    stitchingVector = "stitchingVector"
    tensorflowModel = "tensorflowModel"
    tensorboardLogs = "tensorboardLogs"
    csvCollection = "csvCollection"
    pyramid = "pyramid"


class Output(BaseModel):
    name: constr(regex=r"^[a-zA-Z0-9][-a-zA-Z0-9]*$") = Field(  # noqa: F722
        ..., examples=["outputCollection"], title="Output name"
    )
    type: Type1 = Field(
        ..., examples=["stitchingVector", "collection"], title="Output type"
    )
    description: constr(regex=r"^(.*)$") = Field(  # noqa: F722
        ..., examples=["Output collection"], title="Output description"
    )


class UiItem(BaseModel):
    key: Union[Any, Any] = Field(
        ...,
        description="Key of the input which this UI definition applies to, the expected format is 'inputs.inputName'. Special keyword 'fieldsets' can be used to define arrangement of inputs by sections.",
        examples=["inputs.inputImages", "inputs.fileNamPattern", "fieldsets"],
        title="UI key",
    )


class WIPPPluginManifest(BaseModel):
    name: constr(regex=r"^(.*)$", min_length=1) = Field(  # noqa: F722
        ..., examples=["My Awesome Plugin"], title="Name of the plugin"
    )
    version: constr(regex=r"^(.*)$", min_length=1) = Field(  # noqa: F722
        ..., examples=["1.0.0"], title="Plugin version"
    )
    title: constr(regex=r"^(.*)$", min_length=1) = Field(  # noqa: F722
        ..., examples=["My really awesome plugin"], title="Plugin title"
    )
    description: constr(regex=r"^(.*)$", min_length=1) = Field(  # noqa: F722
        ..., examples=["My awesome segmentation algorithm"], title="Description"
    )
    author: Optional[Optional[constr(regex=r"^(.*)$")]] = Field(  # noqa: F722
        "", examples=["FirstName LastName"], title="Author(s)"
    )
    institution: Optional[Optional[constr(regex=r"^(.*)$")]] = Field(  # noqa: F722
        "",
        examples=["National Institute of Standards and Technology"],
        title="Institution",
    )
    repository: Optional[Optional[str]] = Field(
        "",
        examples=["https://github.com/usnistgov/WIPP"],
        title="Source code repository",
    )
    website: Optional[Optional[str]] = Field(
        "", examples=["http://usnistgov.github.io/WIPP"], title="Website"
    )
    citation: Optional[Optional[constr(regex=r"^(.*)$")]] = Field(  # noqa: F722
        "",
        examples=[
            "Peter Bajcsy, Joe Chalfoun, and Mylene Simon (2018). Web Microanalysis of Big Image Data. Springer-Verlag International"
        ],
        title="Citation",
    )
    containerId: constr(regex=r"^(.*)$") = Field(  # noqa: F722
        ...,
        description="Docker image ID",
        examples=["wipp/example-plugin:1.0.0"],
        title="ContainerId",
    )
    inputs: List[Input] = Field(
        ..., description="Defines inputs to the plugin", title="List of Inputs"
    )
    outputs: List[Output] = Field(
        ..., description="Defines the outputs of the plugin", title="List of Outputs"
    )
    ui: List[UiItem] = Field(..., title="Plugin form UI definition")
