# generated by datamodel-codegen:
#   filename:  PolusComputeSchema.json
#   timestamp: 2022-02-03T01:52:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Model(BaseModel):
    __root__: Any


class ConditionEntry(BaseModel):
    expression: Optional[str] = None


class CustomUIType(str, Enum):
    collection = "collection"
    stitchingVector = "stitchingVector"
    tensorflowModel = "tensorflowModel"
    csvCollection = "csvCollection"
    pyramid = "pyramid"
    notebook = "notebook"


class GpuVendor(str, Enum):
    none = "none"
    amd = "amd"
    tpu = "tpu"
    nvidia = "nvidia"


class PluginHardwareRequirements(BaseModel):
    coresMax: Optional[Union[str, float]] = None
    coresMin: Optional[Union[str, float]] = None
    cpuAVX: Optional[bool] = None
    cpuAVX2: Optional[bool] = None
    cpuMin: Optional[str] = None
    gpu: Optional[GpuVendor] = None
    gpuCount: Optional[float] = None
    gpuDriverVersion: Optional[str] = None
    gpuType: Optional[str] = None
    outDirMax: Optional[Union[str, float]] = None
    outDirMin: Optional[Union[str, float]] = None
    ramMax: Optional[Union[str, float]] = None
    ramMin: Optional[Union[str, float]] = None
    tmpDirMax: Optional[Union[str, float]] = None
    tmpDirMin: Optional[Union[str, float]] = None


class PluginInputType(Enum):
    path = "path"
    string = "string"
    number = "number"
    array = "array"
    boolean = "boolean"


class PluginOutputType(str, Enum):
    path = "path"


class PluginUIType(Enum):
    checkbox = "checkbox"
    color = "color"
    date = "date"
    email = "email"
    number = "number"
    password = "password"
    radio = "radio"
    range = "range"
    text = "text"
    time = "time"


class ThenEntry(BaseModel):
    action: Optional[str] = None
    input: Optional[str] = None
    value: Optional[str] = None


class Validator(BaseModel):
    then: Optional[List[ThenEntry]] = None
    validator: Optional[List[ConditionEntry]] = None


class PluginInput(BaseModel):
    format: Optional[str] = None
    label: Optional[str] = None
    name: Optional[str] = None
    required: Optional[bool] = None
    type: Optional[PluginInputType] = None


class PluginOutput(BaseModel):
    format: Optional[str] = None
    label: Optional[str] = None
    name: Optional[str] = None
    type: Optional[PluginOutputType] = None


class PluginUIInput(BaseModel):
    bind: Optional[str] = None
    condition: Optional[Union[List[Validator], str]] = None
    default: Optional[Union[str, float, bool]] = None
    description: Optional[str] = None
    fieldset: Optional[List[str]] = None
    hidden: Optional[bool] = None
    key: Optional[str] = None
    title: Optional[str] = None
    type: Optional[PluginUIType] = None


class PluginUIOutput(BaseModel):
    description: Optional[str] = None
    format: Optional[str] = None
    name: Optional[str] = None
    type: Optional[PluginUIType] = None


class CLTSchema(BaseModel):
    author: Optional[str] = None
    baseCommand: Optional[List[str]] = None
    citation: Optional[str] = None
    class_: Optional[str] = Field(None, alias="class")
    containerId: Optional[str] = None
    customInputs: Optional[bool] = None
    cwlVersion: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    inputs: Optional[List[PluginInput]] = None
    institution: Optional[str] = None
    name: Optional[str] = None
    outputs: Optional[List[PluginOutput]] = None
    pluginHardwareRequirements: Optional[PluginHardwareRequirements] = None
    repository: Optional[str] = None
    stderr: Optional[str] = None
    stdout: Optional[str] = None
    title: Optional[str] = None
    ui: Optional[List[Union[PluginUIInput, PluginUIOutput]]] = None
    version: constr(
        regex="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
    ) = None
    website: Optional[str] = None


class PluginSchema(BaseModel):
    author: Optional[str] = None
    baseCommand: Optional[List[str]] = None
    citation: Optional[str] = None
    containerId: Optional[str] = None
    customInputs: Optional[bool] = None
    description: Optional[str] = None
    inputs: Optional[List[PluginInput]] = None
    institution: Optional[str] = None
    name: Optional[str] = None
    outputs: Optional[List[PluginOutput]] = None
    pluginHardwareRequirements: Optional[PluginHardwareRequirements] = None
    repository: Optional[str] = None
    title: Optional[str] = None
    ui: Optional[List[Union[PluginUIInput, PluginUIOutput]]] = None
    version: constr(
        regex=r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
    ) = Field(examples=["0.1.0", "0.1.0rc1"])
    website: Optional[str] = None
